{"version":3,"sources":["components/header.js","components/entertodo.js","components/actualtodolist.js","components/footer.js","components/Numberoftasks.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Component","Entertodo","state","taskDescription","date","errorMessage","inputBoxChanged","event","_this","setState","target","value","addTaskClicked","newDate","taskString","charAt","toUpperCase","slice","props","buttonHandlerFunction","refs","textInput","handleDateChange","type","ref","placeholder","onChange","this","form","id","onClick","Actualtodolist","textCol","task","done","_this2","today","moment","isOverdue","isBefore","taskId","format","description","doneFunction","taskid","data-toggle","data-placement","title","deleteFunction","Footer","Numberoftasks","numOfTasks","App","tasks","qtyOfTasks","isLoaded","componentDidMount","getTasks","sort","length","switcher","sortPass","i","temp","temp1","Done","tempTasks","map","elem","dbDoneUpdate","num","url","toString","axios","put","then","result","catch","err","console","log","Deleted","filter","dbDelete","delete","addTask","taskObject","userid","unshift","post","data","get","response","header","entertodo","item","actualtodolist","key","components_Numberoftasks","qtyOfTasksFunction","footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d58c98d4.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Header extends Component {\n    render() {\n        return (\n            <div className=\"heading\">\n                <h1>Todo App written in React</h1>\n            </div>\n        )\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\n\n\nclass Entertodo extends Component {\n\n    state = {\n        taskDescription: \"\",\n        date: \"\",\n        errorMessage: \"\"\n    }\n\n    inputBoxChanged = (event) => {\n        this.setState({\n            taskDescription: event.target.value\n        })\n    }\n\n    addTaskClicked = (event) => {\n        if (this.state.date === \"\") {\n            this.setState({\n                errorMessage: \"Please Enter Date\"\n            })\n        } else {\n            if (this.state.taskDescription !== \"\") {\n                var newDate = this.state.date\n                //turn 1st char to upper case\n                var taskString = this.state.taskDescription.charAt(0).toUpperCase() + this.state.taskDescription.slice(1)\n                this.props.buttonHandlerFunction(taskString, newDate)\n                this.refs.textInput.value = \"\";\n                this.setState({\n                    taskDescription: \"\",\n                    date: \"\"\n                })\n            }\n        }\n    }\n\n\n    handleDateChange = (event) => {\n        const date = event.target.value\n        this.setState({\n            date: date,\n            errorMessage: \"\"\n        })\n    }\n\n    render() {\n\n        return (\n            <div>\n                <div className=\"todoinput col text-center\">\n\n                    <input type=\"text\" ref=\"textInput\"\n                        placeholder=\"Add task here\"\n                        onChange={this.inputBoxChanged}\n                        className=\"form-control todoInput\">\n                    </input>\n\n                    <label form=\"dateInput\">Done By Date&nbsp;</label>\n                    <input id=\"dateInput\" type=\"date\" onChange={this.handleDateChange} value={this.state.date} />\n\n                    <button type=\"submit\" onClick={this.addTaskClicked} className=\"btn btn-primary addbutton\">ADD TO LIST</button>\n                </div>\n                <h2 className=\"centered red\">{this.state.errorMessage}</h2>\n            </div>\n\n        )\n    }\n}\n\nexport default Entertodo;","import React, { Component } from 'react';\nimport moment from 'moment'\n\n\nclass Actualtodolist extends Component {\n\n    // SETS CSS FOR THE TASK DEPENDING ON IF DONE OR NOT\n    textCol = () => {\n        if (this.props.task.done) {\n            return \"green normalSize\"\n        } else {\n            return \"black normalSize\"\n        }\n    }\n\n    render() {\n        const today = moment()\n        const isOverdue = moment(this.props.task.date).isBefore(today)\n        return (\n\n            <div className=\"row \">\n                <div className=\"col-sm-12 col-md-6 col-lg-8 todoText\">\n                    {\n                        <div id={this.props.taskId}>\n                            <span className={isOverdue ? \"overdue xsmall\" : \"xsmall\"}>\n                                {moment(this.props.task.date).format(\"Do MMM YYYY\")}\n                            </span>\n                            <span>{\"  \"}</span>\n                            <span className={this.textCol()}>\n                                {this.props.task.description}\n                            </span>\n                        </div>\n                    }\n                </div>\n\n                <div className=\"col-sm-12 col-md-6 col-lg-4 buttonDiv\">\n                    {!this.props.task.done &&\n                        <button type=\"button\" onClick={() => this.props.doneFunction(this.props.task.taskid)} className=\"btn btn-success buttona\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Marks the task as done\">Done</button>\n                    }\n                    <button type=\"button\" onClick={() => this.props.deleteFunction(this.props.task.taskid)} className=\"btn btn-danger buttona\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Deletes the task\" >Delete</button>\n                </div>\n            </div >\n        )\n    }\n}\n\nexport default Actualtodolist;","import React, { Component } from 'react';\n\nclass Footer extends Component {\n    render() {\n        return (\n            <div className=\"bottom\">\n                <p>&#169; Simon Cobb 2019</p>\n            </div>\n        )\n    }\n}\nexport default Footer;","import React, { Component } from 'react';\n\nclass Numberoftasks extends Component {\n    render() {\n        return (\n            <div className=\"col text-center\">\n                <div className=\"btn btn-primary notifications\">\n                    Number of items in the list <span className=\"badge badge-light\">{this.props.numOfTasks}</span>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Numberoftasks;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/header';\nimport Entertodo from './components/entertodo';\nimport Actualtodolist from './components/actualtodolist'\nimport Footer from './components/footer'\nimport Numberoftasks from './components/Numberoftasks'\nimport moment from 'moment'\nimport axios from \"axios\"\n\n\nclass App extends Component {\n\n  state = {\n    tasks: [],\n    qtyOfTasks: 0,\n    isLoaded: false\n  }\n\n  //Anything in here happens on the 1st initial render of the component\n  componentDidMount = () => {\n    this.getTasks()\n  }\n\n  async getTasks() {\n    let response = await axios.get(\"https://f8nibhiadf.execute-api.eu-west-2.amazonaws.com/dev/tasks\");\n    let { data } = response\n    this.setState({\n      tasks: this.sort(data.tasks),\n      isLoaded: true\n    })\n  }\n\n\n  sort = (tasks) => {\n    if (tasks.length < 2) { return tasks }\n    do {\n      var switcher = this.sortPass(tasks)\n    }\n    while (switcher === 1)\n    return (tasks)\n  }\n\n  sortPass = (tasks) => {\n    var switcher = 0\n    var i = tasks.length - 1\n    do {\n      if (moment(tasks[i].date).isBefore(moment(tasks[i - 1].date))) {\n        switcher = 1\n        var temp = tasks[i]\n        var temp1 = tasks[i - 1]\n        tasks[i] = temp1\n        tasks[i - 1] = temp\n      }\n      i--\n    }\n    while (i > 0)\n    return (switcher)\n  }\n\n  Done = (id) => {\n    var tempTasks = this.state.tasks.map((elem, i) => {\n      if (elem.taskid === id) {\n        elem.done = true\n      }\n      return elem\n    })\n    this.setState({\n      tasks: tempTasks\n    })\n    this.dbDoneUpdate(id)\n  }\n\n  dbDoneUpdate = (num) => {\n    const url = \"https://f8nibhiadf.execute-api.eu-west-2.amazonaws.com/dev/tasks/\" + num.toString()\n    axios.put(url)\n      .then(result => {\n        // Task if deleted OK\n      })\n      .catch(err => {\n        console.log(err)\n      })\n  }\n\n  Deleted = (id) => {\n    var tempTasks = this.state.tasks.filter(function (elem) {\n      return (id !== elem.taskid);\n    })\n    this.dbDelete(id)\n    this.setState({\n      tasks: tempTasks\n    })\n  }\n\n  dbDelete = (id) => {\n    const url = \"https://f8nibhiadf.execute-api.eu-west-2.amazonaws.com/dev/tasks/\" + id.toString()\n    axios.delete(url)\n      .then(result => {\n        // Task if deleted OK\n      })\n      .catch(err => {\n        console.log(err)\n      })\n  }\n\n  addTask = (taskDescription, date) => {\n    var tasks\n    const taskObject = {\n      description: taskDescription,\n      done: false,\n      userid: 1,\n      date: date\n    }\n    tasks = this.state.tasks.slice()\n    tasks.unshift(taskObject)\n    // THIS BIT SENDS THE DATA TO THE SERVER\n    axios.post(\"https://f8nibhiadf.execute-api.eu-west-2.amazonaws.com/dev/tasks\",\n      taskObject\n    )\n      .then(result => {\n        tasks[0].taskid = result.data.taskId\n        tasks = this.sort(tasks)\n        this.setState({\n          tasks: tasks\n        })\n        return\n      })\n      .catch(err => {\n        console.log(err)\n      })\n  }\n\n  render() {\n\n    return (\n\n      <div className=\"container mainstyle\">\n        <Header />\n\n        {/* USER INPUT THE TASK & DATE*/}\n        <Entertodo\n          buttonHandlerFunction={this.addTask}\n          numOfTasks={this.state.qtyOfTasks} />\n\n        {/* DISPLAY THE TASKS (WITH DATE DONE/DELETE BUTTONS) OR \"FETCHING TASKS\" */}\n        {this.state.isLoaded ? (\n          <div className=\"mainList\">\n            {\n              this.state.tasks.map((item, i) => {\n                return <Actualtodolist\n                  key={item.taskid}\n                  task={item}\n                  // buttonHandlerFunction={this.addTask}\n                  doneFunction={this.Done}\n                  deleteFunction={this.Deleted}\n                  numOfTasks={this.state.qtyOfTasks} />\n              })\n            }\n\n            {/* DISPLAY THE NUMBER OF TASKS BUTTON */}\n            <Numberoftasks\n              qtyOfTasksFunction={this.qtyOfTasks}\n              numOfTasks={this.state.tasks.length} />\n          </div>\n        )\n          : (\"Fetching Tasks\")\n        }\n\n        <Footer />\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}